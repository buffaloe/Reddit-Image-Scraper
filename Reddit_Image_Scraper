#!/usr/bin/env perl

#   Reddit Image Scraper: A perl script to download images hosted on
#   the imgur.com hosting service linked from a subreddit at reddit.com
#   Copyright (C) 2011 Joshua Hull

#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use JSON;
use WWW::Mechanize;
use URI;

die "Usage: $0 subreddit [...]\n" unless @ARGV;

my $mech = WWW::Mechanize->new(autocheck=>0);

foreach my $sub (@ARGV) {

    my @links;

    # Create the directory if necessary.
    mkdir $sub unless -d $sub;

    my $url = "http://www.reddit.com/r/$sub/.json?limit=100";
    $mech->get($url);

    my $json_text = JSON->new->allow_nonref->utf8->relaxed->decode($mech->text);
    my $posts     = $json_text->{data}->{children};
    foreach my $post (@{$posts}) {
        my $uri = URI->new($post->{data}->{url}) or next;
        ## remove any paramters such as http://i.imgur.com/K7EdYrV.jpg?1
        $uri->query_form({});
        push @links, get_image_links($uri->as_string);
    }

    print 'Extracted ' . @links . " images for download\n";
    foreach my $img (@links) {
        print 'Downloading ' . $img->{url} . "\n";
        $mech->get($img->{url}, ':content_file' => "$sub/" . $img->{file_name});
    }
}

sub get_image_links {
    my ($url) = @_;
    my @images;
    if ($url =~ m{ imgur\.com/a/ [^/]+ /?$ }ix) {
        my ($json) = ($mech->content =~ m{ images: \s+ (.+?) ,\s* cover: }isx);
        my $struct = eval { $json && JSON->new->allow_nonref->utf8->relaxed->decode($json) };
        if ($struct) {
            foreach my $item (@{$struct->{items}}) {
                my %info;
                $info{file_name} = $item->{hash} . $item->{ext};
                $info{url} = 'http://imgur.com/' . $info{file_name};
                push @images, \%info if $info{url} && $info{file_name};
            }
        }
    }
    elsif ($url =~ m{ imgur\.com/ ([^/\.]+) (\. [^/\.]+)? /?$ }ix) {
        my %info;
        unless ($2) {
            $mech->follow_link( url_regex => qr/$1/i );
            $url = $mech->uri;
        }
        $info{url} = $url;
        ($info{file_name}) = $url =~ m{ imgur\.com/([^/]+) }ix;
        push @images, \%info if $info{url} && $info{file_name};
    }
    return @images;
}
